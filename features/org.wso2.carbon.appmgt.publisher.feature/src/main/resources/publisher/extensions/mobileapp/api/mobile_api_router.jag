<%
include("/extensions/webapp/modules/jagg/jagg.jag");
require('/modules/publisher.js').exec(function(ctx) {

    var config = require('/config/publisher.json');
    var router = require('/modules/router-g.js').router();
    var routeManager = new router.Router();
    var log = new Log();

    var publisher = require('/modules/publisher.js').publisher(request, session);
    var rxtManager = publisher.rxtManager;
    var server = require('store').server;
    var permissions=require('/modules/permissions.js').permissions;
    var apiProvider = jagg.module('manager').getAPIProviderObj();
    var auditLog = require('/modules/auditLog/logger.js');

    routeManager.register('DELETE', 'publisher', '/publisher/api/mobile/delete/{app}', function (ctx) {
        var username=require('store').server.current(session).username;
        var um = server.userManager(server.current(session).tenantId);
        var registry = server.systemRegistry(server.current(session).tenantId);
        var deleteAuthorized = permissions.isAuthorized(username, config.permissions.webapp_delete, um);

        if(deleteAuthorized){
            var app = ctx.params.app;
            var artifactManager = rxtManager.getArtifactManager("mobileapp");
            var fileNames = [];

            var artifact = artifactManager.get(app);
            fileNames.push(artifact.attributes.images_thumbnail);
            fileNames.push(artifact.attributes.images_banner);
            var screenShots = artifact.attributes.images_screenshots.split(",");

            for each(var screenshot in screenShots){
                if(screenshot){
                    fileNames.push(screenshot);
                }
            }
            if(artifact.attributes.overview_type != "webapp" && artifact.attributes.overview_type != "public"){
               var mobileBinaryUrl = artifact.attributes.overview_url;
                if(mobileBinaryUrl){
                   var binaryFileName = mobileBinaryUrl.substring(mobileBinaryUrl.lastIndexOf("/") + 1, mobileBinaryUrl.length);
                   fileNames.push(binaryFileName);
                }
            }
            var attributes = artifact.attributes;
            var appType = "mobileApp";
            var tenantId = server.current(session).tenantId;
            var appName = attributes["overview_name"];
            var appVersion = attributes["overview_version"];
            var appProvider = attributes["overview_provider"];
            var appPlatform = attributes["overview_platform"];
            path = "/_system/governance/mobileapps/" + appProvider + "/" + appPlatform + "/" + appName + "/" +
                   appVersion;
            registry.remove(path);
            apiProvider.removeBinaryFilesFromStorage(fileNames);
            auditLog.writeLog(tenantId, username, "AssetDeleted", appType, "{providerName='" + appProvider +
                                                                           "', appName='" + appName +
                                                                           "', version='" + appVersion + "'}",
                              artifact);
        }
    });

    routeManager.register('GET', 'publisher', '/publisher/api/mobile/isexist', function (ctx) {

        var name = request.getParameter("name");
        var artifactManager = rxtManager.getArtifactManager("mobileapp");
        searchOptions = name;

        var  paging = {};

        map = new java.util.HashMap();
        list = new java.util.ArrayList();
        list.add(name);
        map.put('overview_name', list);

        var versionList = artifactManager.manager.findGenericArtifacts(map);
        response.contentType = "application/json";
        if(versionList.length > 0){

            var versionList = artifactManager.search(searchOptions, paging);
            var originalName = "";

            if(versionList.length > 0){
                var versions = "";
                for( i = 0; i < versionList.length; i++){
                    versions += versionList[i].attributes.overview_version;
                    originalName = versionList[i].attributes.overview_name;
                    if(i < versionList){
                        version += ",";
                    }
                }

                print({isExist: true, versions : versions, name:originalName});
            }else{
                print({isExist: false});
            }

        }else{
            print({isExist: false});
        }

    });



    routeManager.handle(request, response);

}, request, response, session);


%>