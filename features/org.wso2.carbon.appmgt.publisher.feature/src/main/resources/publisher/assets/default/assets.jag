<%
//print('Default assets file');

/*
 Description: Provides CRUD operations on groups of assets
 GET api/assets		      	 : Returns  a list of all asset types
 GET api/assets/{type}            : Returns  a list of all assets
 GET api/assets/{type}/{pageSize} : Returns  a paged list of assets
 Filename:assets.js
 Created Date: 29/7/2013
 */

include("/extensions/webapp/modules/jagg/jagg.jag");

require('/modules/publisher.js').exec(function (ctx) {

    var router = require('/modules/router-g.js').router();
    var config = require('/config/publisher.json');
    caramel = require('caramel');
    var server = require('store').server;
    var publisher = require('/modules/publisher.js').publisher(request, session);
    var apiProvider = jagg.module('manager').getAPIProviderObj();

    var routeMnger = new router.Router();
//var routeManager=application.get(config.app.ROUTE_MANAGER);
    var rxtManager = publisher.rxtManager;
    var modelManager = publisher.modelManager;
    var dataInjector = publisher.dataInjector;
    var DataInjectorModes = publisher.DataInjectorModes;
    var filterManager = publisher.filterManager;
    var permissions = require('/modules/permissions.js').permissions;
    var typeList = apiProvider.getEnabledAssetTypeList();

    var log = new Log();

    var PAGE_SIZE = config.paginationConfig.PAGE_SIZE;
    var PAGE_SIZE_ON_REVIEW = config.paginationConfig.PAGE_SIZE_ON_REVIEW;
    var PAGNINATION_SIZE = config.paginationConfig.PAGNINATION_SIZE;

//var DEFAULT_PAGIN = {'start':0, 'count':20 , 'sortOrder':'desc','sortBy': 'overview_createdtime', 'paginationLimit':1000};
    var DEFAULT_PAGING = {'sortOrder': 'desc', 'sortBy': 'overview_createdtime', 'paginationLimit': 1000};

    /*routeMnger.register('GET','publisher','/publisher/assets/list',function(context){

     //Print all of the rxt types
     for each(var template in rxtManager.rxtTemplates){
     print(template.shortName+'</br>');
     }

     print('root asset');
     //caramel.render({sample: {name: 'Default asset renderer'}});

     });*/
    var log = new Log();


    /**
     * The function will create an array of page indices upto the page count
     * @param pageCount The max page count
     */
    var pageIndexPopulator = function (currentPage, isMorePagesAvailable, initialAppCount, onReviewStateAppCount) {

        // Count the maximum showable app count in the pagination.
        var maxShowableAppCount = (PAGE_SIZE + PAGE_SIZE_ON_REVIEW) * PAGNINATION_SIZE;
        var pageCount = 0;

        log.debug("Total app count: " + (initialAppCount + onReviewStateAppCount));
        log.debug("Max showable app count: " + maxShowableAppCount);

        // If the max showable app count is lesser than the initial app count, we can directly generate indices from
        // initial app count.
        if ((initialAppCount + onReviewStateAppCount) < maxShowableAppCount) {
            pageCount = getAvailablePages(initialAppCount, onReviewStateAppCount);
        } else {
            // Page count sould be max showable app count if the current page is less than the max showable page. Else,
            // current page will be the max page.
            pageCount = getAvailablePages(maxShowableAppCount, 0) > currentPage ? getAvailablePages(maxShowableAppCount, 0)
                : currentPage;
        }

        log.debug("Page count: " + pageCount);

        var indices = [];
        var temp = {};

        // Increase the page count if we are on the last page and there are more pages available.
        if (currentPage == pageCount && isMorePagesAvailable) {
            pageCount++;
        }

        for (var index = 1; index <= pageCount; index++) {
            temp = {};
            temp.index = '' + index;
            temp.isDisabled = false;

            if (index == currentPage) {
                temp.isDisabled = true;
            }
            indices.push(temp);
        }

        return indices;
    };

    var getAvailablePages = function (initialAppCount, onReviewAppCount) {

        if (initialAppCount > 0) {
            var pagesForInitialApps = Math.floor(initialAppCount / (PAGE_SIZE));
        } else {
            var pagesForInitialApps = 0;
        }

        if (onReviewAppCount) {
            var pagesForOnReviewApps = Math.floor(onReviewAppCount / PAGE_SIZE_ON_REVIEW);
        } else {
            var pagesForOnReviewApps = 0;
        }

        log.debug("Pages for initial: " + pagesForInitialApps);
        log.debug("Pages for review: " + pagesForOnReviewApps);

        var remainderForInitialApps = (initialAppCount / PAGE_SIZE) % 1;
        if (remainderForInitialApps) {
            pagesForInitialApps += 1;
        }

        var remainderForOnReviewApps = (onReviewAppCount / PAGE_SIZE_ON_REVIEW) % 1;
        if (remainderForOnReviewApps) {
            pagesForOnReviewApps += 1;
        }

        return pagesForInitialApps > pagesForOnReviewApps ? pagesForInitialApps : pagesForOnReviewApps;
    };

    var getCurrentPage = function (currentIndex) {
        var pageNumber = Math.floor(currentIndex / (PAGE_SIZE + PAGE_SIZE_ON_REVIEW));
        var remainder = (currentIndex / (PAGE_SIZE + PAGE_SIZE_ON_REVIEW)) % 1;

        if (remainder || pageNumber === 0) {
            pageNumber = pageNumber + 1;
        }
        return pageNumber;
    }

    var getAppCountForUserWithPaging = function (searchQuery, countPaging, artifactManager) {
        var apps = artifactManager.search(searchQuery, countPaging);
        if (apps) {
            return apps.length;
        }
        return 0;
    }

    var isRoleExistForUser = function (role, username, userManager) {
        var roleList = userManager.getRoleListOfUser(username)
        for (index in roleList) {
            if (role == roleList[index]) {
                return true;
            }
        }
        return false;
    }

    routeMnger.register('GET', 'publisher', '/publisher/assets/{type}/', function (context) {

        var query = request.getParameter("query");
        var sortby = request.getParameter("sortby");
        var sort = request.getParameter("sort");
        var page = request.getParameter("page");
        var type = context.params.type;

        var server = require('store').server;
        var carbon = require('carbon');

        var tenantId = server.current(session).tenantId;
        var user = server.current(session);
        var um = server.userManager(tenantId);
        var realmService = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var userRealm = realmService.getTenantUserRealm(tenantId);

        var createActionAuthorized = permissions.isAuthorized(user.username, config.permissions.webapp_create, um);
        var createMobileAppAuthorized = permissions.isAuthorized(user.username, config.permissions.mobileapp_create, um);
        var publishMobileAppAuthorized = permissions.isAuthorized(user.username, config.permissions.mobileapp_publish, um);
        var isUserAdmin = isRoleExistForUser(userRealm.getRealmConfiguration().getAdminRoleName(), user.username, um);

        try {
            var artifactManager = rxtManager.getArtifactManager(type);
            var artifacts = [];
            var startVal;
            var startValOnReview;

            var countPaging = DEFAULT_PAGING;
            countPaging.count = (PAGE_SIZE_ON_REVIEW + PAGE_SIZE) * PAGNINATION_SIZE;

            var onReviewStateAppCount = 0;
            if (publishMobileAppAuthorized || isUserAdmin) {
                onReviewStateAppCount = getAppCountForUserWithPaging({"lcState": "In-Review"}, countPaging,
                    artifactManager);
            }

            // Get the initial page count from session. If it is not available in the the session or PAGINATION size
            // increased, update the value in session.
            var initialAppCount  = session.get("initialAppCount");
            var updateRequired =  session.get("updateAppCount");

            log.debug("Update requrired: " + updateRequired);

            if (!initialAppCount || updateRequired) {
                if (isUserAdmin) {
                    initialAppCount = getAppCountForUserWithPaging({"-lcState": "In-Review"}, countPaging,
                        artifactManager);
                } else {
                    initialAppCount = getAppCountForUserWithPaging({
                        "overview_provider": user.username,
                        "-lcState": "In-Review"
                    }, countPaging, artifactManager);
                }
                session.put("initialAppCount", initialAppCount);
                session.put("updateAppCount", false);

                log.debug("No page count or pagination size is changed. Updating the session cache. Initial page " +
                    "count: " + initialPages);
            }

            log.debug("Initial app count: " + initialAppCount);

            var initialPages = getAvailablePages(initialAppCount, onReviewStateAppCount);

            // Calculate the start application number.
            if (page) {
                if (page >= 0) {
                    startVal = (page - 1) * PAGE_SIZE;
                    startValOnReview = (page - 1) * PAGE_SIZE_ON_REVIEW;
                } else {
                    startVal = 0;
                    startValOnReview = 0;
                }
            } else {
                // If the page number is not specified, we have to assume that page number is 1.
                page = 1;
                startVal = 0;
                startValOnReview = 0;
            }

            // We have to check only the next page is avialble to improve the performance.
            var isMorePagesAvailable = false;
            if (initialPages >= PAGNINATION_SIZE) {
                countPaging.count = 1;
                if (page >= PAGNINATION_SIZE) {
                    countPaging.start = startVal + PAGE_SIZE;
                    var count = 0;
                    if (isUserAdmin) {
                        count = getAppCountForUserWithPaging({"-lcState": "In-Review"}, countPaging,
                            artifactManager);
                    } else {
                        count = getAppCountForUserWithPaging({"overview_provider": user.username}, countPaging,
                            artifactManager);
                    }

                    if (publishMobileAppAuthorized || isUserAdmin) {
                        count += getAppCountForUserWithPaging({"lcState": "In-Review"}, countPaging,
                            artifactManager);
                        ;
                    }
                    if (count > 0) {
                        isMorePagesAvailable = true;
                    }
                }
            }

            log.debug("Initial pages: " + initialPages);

            DEFAULT_PAGING.start = startVal;
            DEFAULT_PAGING.count = PAGE_SIZE;

            if (sortby && sort) {
                DEFAULT_PAGING.sortBy = 'overview_' + sortby;
                DEFAULT_PAGING.sortOrder = sort.toUpperCase();
            }

            var assets;

            if (query) {
                // For search queries.
                if (publishMobileAppAuthorized || isUserAdmin) {
                    var usersAssets;
                    if (isUserAdmin) {
                        usersAssets = artifactManager.search({
                                "-lcState": "In-Review",
                                "overview_name": "*" + query + "*"
                            },
                            DEFAULT_PAGING);
                    } else {
                        usersAssets = artifactManager.search({
                                "overview_provider": user.username,
                                "-lcState": "In-Review",
                                "overview_name": "*" + query + "*"
                            },
                            DEFAULT_PAGING);
                    }

                    DEFAULT_PAGING.start = startValOnReview;
                    DEFAULT_PAGING.count = PAGE_SIZE_ON_REVIEW;

                    var inReviewApps = artifactManager.search({"lcState": "In-Review",
                        "overview_name": "*" + query + "*"}, DEFAULT_PAGING);

                    assets = usersAssets.concat(inReviewApps);
                } else {
                    assets = artifactManager.search({
                        "overview_provider": user.username,
                        "overview_name": "*" + query + "*"
                    }, DEFAULT_PAGING);
                }
                artifacts = assets;
            } else {
                // List users from user name from registry.
                if (publishMobileAppAuthorized || isUserAdmin) {
                    var usersAssets;
                    if (isUserAdmin) {
                        usersAssets = artifactManager.search({
                            "-lcState": "In-Review"
                        }, DEFAULT_PAGING);
                    } else {
                        usersAssets = artifactManager.search({
                            "overview_provider": user.username,
                            "-lcState": "In-Review"
                        }, DEFAULT_PAGING);
                    }

                    DEFAULT_PAGING.start = startValOnReview;
                    DEFAULT_PAGING.count = PAGE_SIZE_ON_REVIEW;

                    var inReviewApps = artifactManager.search({"lcState": "In-Review"}, DEFAULT_PAGING);
                    assets = usersAssets.concat(inReviewApps);
                } else {
                    var usersAssets = artifactManager.search({"overview_provider": user.username}, DEFAULT_PAGING);
                    assets = usersAssets;
                }
                artifacts = assets;
            }

            dataInjector.inject(artifacts, DataInjectorModes.DISPLAY);

            // TODO: Do we need this ?
            // Perform some filtering logic on the artifacts
            // artifacts = filterManager.filter(artifacts, session);

            // Generate pagination indices.
            var indices = pageIndexPopulator(page, isMorePagesAvailable, initialAppCount, onReviewStateAppCount);
            var pageIndices;

            if (indices.length > 1) {
                pageIndices = indices;
            }

            if (page - 1 >= 0) {
                var leftnav = parseInt(page) - 1;
            }

            if (indices.length > parseInt(page)) {
                var rightnav = parseInt(page) + 1;
            }

            var sortOpposite = (sort == 'asc' ? 'desc' : 'asc');
            var sortIcon = (sort == 'asc' ? 'down' : 'up');

            if (apiProvider.isAssetTypeEnabled(type)) {
                caramel.render({
                    op: 'list',
                    cuser: server.current(session),
                    roles: server.current(session).getRoles(),
                    shortName: type,
                    artifacts: artifacts,
                    query: query,
                    title: type,
                    pageIndices: pageIndices,
                    leftNav: leftnav,
                    rightNav: rightnav,
                    createPermission: createActionAuthorized,
                    mobileAppCreatePermission: createMobileAppAuthorized,
                    sortOptions: {sortBy: sortby, sort: sortOpposite, icon: sortIcon},
                    typeList: typeList
                });
            }
            else {
                response.sendError(404, 'Resource does not exist');
            }
        } catch (e) {
            response.sendError(400, "Your request is malformed.");
            log.error(e.message);
            log.error(e.stack);
        }
    });

    routeMnger.register('GET', 'publisher', '/publisher/assets/{operation}/{type}/', function (context) {
        var operation = (context.params.operation) || '';
        var type = context.params.type;

        var subscriptionConfiguration = apiProvider.getSubscriptionConfiguration();
        var disableSubscriptionStats;
        if (!subscriptionConfiguration.EnableSelfSubscription && !subscriptionConfiguration.EnableEnterpriseSubscription ) {
            disableSubscriptionStats = false;
        } else {
            disableSubscriptionStats = true;
        }

        if (operation == 'statistics') {
            try {
                caramel.render({op: operation, cuser: server.current(session), shortName: type, title: type});

            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }

            /*for each(var artifact in artifacts){
             print(artifact.id+'<br/><br/>');
             }*/
        }
        if (operation == 'apps') {
            try {
                caramel.render({op: operation, cuser: server.current(session), shortName: type, title: type});

            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }

            /*for each(var artifact in artifacts){
             print(artifact.id+'<br/><br/>');
             }*/
        }
        if (operation == 'app_sub_user') {
            try {
                caramel.render({op: operation, cuser: server.current(session), shortName: type, title: type});

            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }

            /*for each(var artifact in artifacts){
             print(artifact.id+'<br/><br/>');
             }*/
        }
        if (operation == 'app-by-popularity-over-time') {
            try {
                caramel.render({op: operation, cuser: server.current(session), shortName: type, title: type});
            } catch (e) {
                response.sendError(404, 'Asset type not found');
            }
        }
        if (operation == 'app-by-endpoint') {
            try {
                caramel.render({op: operation, cuser: server.current(session), shortName: type, title: type});
            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }
        }
        if (operation == 'response-time') {
            try {
                caramel.render({op: operation, cuser: server.current(session), shortName: type, title: type});

            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }

            /*for each(var artifact in artifacts){
             print(artifact.id+'<br/><br/>');
             }*/
        }
        if (operation == 'usage-page') {
            try {
                caramel.render({op: operation, cuser: server.current(session), shortName: type, title: type});

            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }

            /*for each(var artifact in artifacts){
             print(artifact.id+'<br/><br/>');
             }*/
        }
        if (operation == 'cache-stat') {
            try {
                caramel.render({op: operation, cuser: server.current(session), shortName: type, title: type});

            } catch (e) {
                response.sendError(404, 'Asset type not found'); //TODO: Replace
            }

            /*for each(var artifact in artifacts){
             print(artifact.id+'<br/><br/>');
             }*/
        }
    });


    routeMnger.handle(request, response);

}, request, response, session);
%>
