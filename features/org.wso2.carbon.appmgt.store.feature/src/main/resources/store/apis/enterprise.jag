<%

matcher = new URIMatcher(request.getRequestURI());

require('/modules/store.js').exec(function (ctx) {

    var log = new Log();
    var configs = ctx.configs;
    var mdmConfig = parse(String((new Packages.org.wso2.carbon.appmgt.mobile.store.MDMConfig()).getConfigs()));

    var devicesClass = new Packages.org.wso2.carbon.appmgt.mobile.store.Devices();

    var isNotCatalog = mdmConfig.IsCatalog == "true" ? false : true;
    var isDeviceSubscriptionEnabled = mdmConfig.EnableSubscriptionFromDevices == "true" ? true : false;


    var server = require('store').server,
            tenant = server.tenant(request, session),
            tenantId = tenant.tenantId,
            store = require('/modules/store.js').store(tenantId, session),
            user = server.current(session),
            enterpriseInstall = require('/extensions/assets/mobileapp/modules/mod-ent-install.js');


    if (!user) {
        if (log.isDebugEnabled()) {
            log.debug("user is not logged in");
        }
        response.sendError(401, 'Unauthorized');
        return;
    }

    var isEnterpiseAdmin = false;
    user.username = org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantAwareUsername(user.username);
    if(user.hasRoles([mdmConfig.EnterpriseOperations_AuthorizedRole])){
        isEnterpiseAdmin = true;
    }


    var um = new carbon.user.UserManager(server, tenantId);

    if (matcher.match('/{context}/apis/enterprise/get-all-roles')) {

        if(!isEnterpiseAdmin){
            response.sendError(401, 'Unauthorized');
        }

        var roles = removeInternalroles(um.allRoles());
        var data = [];
        for(var i = 0; i < roles.length; i++){
            data.push([roles[i]]);
        }
        response.contentType = "application/json";
        print({aaData:data});

        return;
    }

    if (matcher.match('/{context}/apis/enterprise/get-roles/{id}')) {

        if(!isEnterpiseAdmin) {
            response.sendError(401, 'Unauthorized');
        }

        var elements = matcher.elements();
        var roles = removeInternalroles(um.allRoles());

        var data = [];	
	    data = filterRoles(roles, elements.id);
        print({aaData:data});

        return;
    }

    if (matcher.match('/{context}/apis/enterprise/get-all-users')) {

        if(!isEnterpiseAdmin){
            response.sendError(401, 'Unauthorized');
        }

        var users = um.listUsers();
        var data = [];
        for(var i = 0; i < users.length; i++){
            data.push([users[i]]);
        }
        response.contentType = "application/json";
        print({aaData:data});
        return;
    }

    if (matcher.match('/{context}/apis/enterprise/get-users/{id}')) {

        if(!isEnterpiseAdmin){
            response.sendError(401, 'Unauthorized');
        }

        var elements = matcher.elements();
        var searchStr = '*' + elements.id + '*';
        var users = um.listUsers(searchStr, -1);
        var data = [];
        for(var i = 0; i < users.length; i++){
            data.push([users[i]]);
        }
        print({aaData:data});
        return;
    }


    if (matcher.match('/{context}/apis/enterprise/get-devices/{type}')) {

        var devices = [];
        if(user != null && isNotCatalog && isDeviceSubscriptionEnabled){
            devices =  parse(String(devicesClass.getDevicesList(stringify(user), user.tenantId, "user", [user.username], matcher.elements().type)));
        }
        response.contentType = "application/json";
        print(devices);
        return;
    }


    if (matcher.match('/{context}/apis/enterprise/perform/{action}/{type}')) {

        if(!isEnterpiseAdmin){
            response.sendError(401, 'Unauthorized');
        }

        var elements = matcher.elements();
        var params = request.getAllParameters("UTF-8");

        var action = elements.action;
        var type = elements.type;
        var app = params.app;
        var data = params["data[]"];
        var isRemovable = params.removable;

        log.debug("Params Received " +stringify(elements) + " & " + stringify(params));

        if(action && type && app && data){

            enterpriseInstall.performAction(action, tenantId, type, app, data, isRemovable);
            response.contentType = "application/json";
            print('{"status" : "success"}');
            return;
        }

    }

    response.sendError(404, 'API Endpoint Not Found');

}, request, response, session);


function removeInternalroles(roles){

    var filterdRoles =[];

    for(i = 0; i < roles.length; i++){

        if(roles[i].indexOf("Internal/") <= -1){
            filterdRoles.push(roles[i]);
        }
    }

    return filterdRoles;
}

function filterRoles(roles, prefix) {
    var filteredRoles =[];
    for (i = 0; i < roles.length; i++) {
	    if(roles[i].indexOf(prefix) !== -1) {
	    	filteredRoles.push(roles[i]);
	    }
    }
    return filteredRoles;
}
%>
